// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/DenisKhanov/shorterURL/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetOriginalURLFromDB mocks base method.
func (m *MockRepository) GetOriginalURL(ctx context.Context, shortURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOriginalURL", ctx, shortURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOriginalURLFromDB indicates an expected call of GetOriginalURLFromDB.
func (mr *MockRepositoryMockRecorder) GetOriginalURLFromDB(ctx, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOriginalURL", reflect.TypeOf((*MockRepository)(nil).GetOriginalURL), ctx, shortURL)
}

// GetShortBatchURLFromDB mocks base method.
func (m *MockRepository) GetShortBatchURL(ctx context.Context, batchURLRequests []models.URLRequest) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortBatchURL", ctx, batchURLRequests)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortBatchURLFromDB indicates an expected call of GetShortBatchURLFromDB.
func (mr *MockRepositoryMockRecorder) GetShortBatchURLFromDB(ctx, batchURLRequests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortBatchURL", reflect.TypeOf((*MockRepository)(nil).GetShortBatchURL), ctx, batchURLRequests)
}

// GetShortURLFromDB mocks base method.
func (m *MockRepository) GetShortURL(ctx context.Context, originalURL string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortURL", ctx, originalURL)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortURLFromDB indicates an expected call of GetShortURLFromDB.
func (mr *MockRepositoryMockRecorder) GetShortURLFromDB(ctx, originalURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortURL", reflect.TypeOf((*MockRepository)(nil).GetShortURL), ctx, originalURL)
}

// GetUserURLSFromDB mocks base method.
func (m *MockRepository) GetUserURLS(ctx context.Context) ([]models.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserURLS", ctx)
	ret0, _ := ret[0].([]models.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserURLSFromDB indicates an expected call of GetUserURLSFromDB.
func (mr *MockRepositoryMockRecorder) GetUserURLSFromDB(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserURLS", reflect.TypeOf((*MockRepository)(nil).GetUserURLS), ctx)
}

// MarkURLsAsDeleted mocks base method.
func (m *MockRepository) MarkURLsAsDeleted(ctx context.Context, URLSToDel []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkURLsAsDeleted", ctx, URLSToDel)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkURLsAsDeleted indicates an expected call of MarkURLsAsDeleted.
func (mr *MockRepositoryMockRecorder) MarkURLsAsDeleted(ctx, URLSToDel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkURLsAsDeleted", reflect.TypeOf((*MockRepository)(nil).MarkURLsAsDeleted), ctx, URLSToDel)
}

// Stats mocks base method.
func (m *MockRepository) GetStats(ctx context.Context) (models.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].(models.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stats indicates an expected call of Stats.
func (mr *MockRepositoryMockRecorder) Stats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockRepository)(nil).GetStats), ctx)
}

// StoreBatchURLInDB mocks base method.
func (m *MockRepository) StoreBatchURL(ctx context.Context, batchURLtoStores map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreBatchURL", ctx, batchURLtoStores)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreBatchURLInDB indicates an expected call of StoreBatchURLInDB.
func (mr *MockRepositoryMockRecorder) StoreBatchURLInDB(ctx, batchURLtoStores interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreBatchURL", reflect.TypeOf((*MockRepository)(nil).StoreBatchURL), ctx, batchURLtoStores)
}

// StoreURLInDB mocks base method.
func (m *MockRepository) StoreURL(ctx context.Context, originalURL, shortURL string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreURL", ctx, originalURL, shortURL)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreURLInDB indicates an expected call of StoreURLInDB.
func (mr *MockRepositoryMockRecorder) StoreURLInDB(ctx, originalURL, shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreURL", reflect.TypeOf((*MockRepository)(nil).StoreURL), ctx, originalURL, shortURL)
}

// MockEncoder is a mock of Encoder interface.
type MockEncoder struct {
	ctrl     *gomock.Controller
	recorder *MockEncoderMockRecorder
}

// MockEncoderMockRecorder is the mock recorder for MockEncoder.
type MockEncoderMockRecorder struct {
	mock *MockEncoder
}

// NewMockEncoder creates a new mock instance.
func NewMockEncoder(ctrl *gomock.Controller) *MockEncoder {
	mock := &MockEncoder{ctrl: ctrl}
	mock.recorder = &MockEncoderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoder) EXPECT() *MockEncoderMockRecorder {
	return m.recorder
}

// CryptoBase62Encode mocks base method.
func (m *MockEncoder) CryptoBase62Encode() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CryptoBase62Encode")
	ret0, _ := ret[0].(string)
	return ret0
}

// CryptoBase62Encode indicates an expected call of CryptoBase62Encode.
func (mr *MockEncoderMockRecorder) CryptoBase62Encode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CryptoBase62Encode", reflect.TypeOf((*MockEncoder)(nil).CryptoBase62Encode))
}

// MockURLInMemoryRepository is a mock of URLInMemoryRepository interface.
type MockURLInMemoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockURLInMemoryRepositoryMockRecorder
}

// MockURLInMemoryRepositoryMockRecorder is the mock recorder for MockURLInMemoryRepository.
type MockURLInMemoryRepositoryMockRecorder struct {
	mock *MockURLInMemoryRepository
}

// NewMockURLInMemoryRepository creates a new mock instance.
func NewMockURLInMemoryRepository(ctrl *gomock.Controller) *MockURLInMemoryRepository {
	mock := &MockURLInMemoryRepository{ctrl: ctrl}
	mock.recorder = &MockURLInMemoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLInMemoryRepository) EXPECT() *MockURLInMemoryRepositoryMockRecorder {
	return m.recorder
}

// SaveBatchToFile mocks base method.
func (m *MockURLInMemoryRepository) SaveBatchToFile() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatchToFile")
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatchToFile indicates an expected call of SaveBatchToFile.
func (mr *MockURLInMemoryRepositoryMockRecorder) SaveBatchToFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatchToFile", reflect.TypeOf((*MockURLInMemoryRepository)(nil).SaveBatchToFile))
}
