// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: shortener.proto

package shortener_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShortenerV1_GetShortURL_FullMethodName      = "/shortener_v1.Shortener_v1/GetShortURL"
	ShortenerV1_GetOriginalURL_FullMethodName   = "/shortener_v1.Shortener_v1/GetOriginalURL"
	ShortenerV1_GetBatchShortURL_FullMethodName = "/shortener_v1.Shortener_v1/GetBatchShortURL"
	ShortenerV1_GetUserURLs_FullMethodName      = "/shortener_v1.Shortener_v1/GetUserURLs"
	ShortenerV1_DelUserURLs_FullMethodName      = "/shortener_v1.Shortener_v1/DelUserURLs"
	ShortenerV1_GetServiceStats_FullMethodName  = "/shortener_v1.Shortener_v1/GetServiceStats"
	ShortenerV1_GetStorageStatus_FullMethodName = "/shortener_v1.Shortener_v1/GetStorageStatus"
)

// ShortenerV1Client is the client API for ShortenerV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerV1Client interface {
	GetShortURL(ctx context.Context, in *GetShortURLRequest, opts ...grpc.CallOption) (*GetShortURLResponse, error)
	GetOriginalURL(ctx context.Context, in *GetOriginalURLRequest, opts ...grpc.CallOption) (*GetOriginalURLResponse, error)
	GetBatchShortURL(ctx context.Context, in *GetBatchShortURLRequest, opts ...grpc.CallOption) (*GetBatchShortURLResponse, error)
	GetUserURLs(ctx context.Context, in *GetUserURLsRequest, opts ...grpc.CallOption) (*GetUserURLsResponse, error)
	DelUserURLs(ctx context.Context, in *DelUserURLsRequest, opts ...grpc.CallOption) (*DelUserURLsResponse, error)
	GetServiceStats(ctx context.Context, in *GetServiceStatsRequest, opts ...grpc.CallOption) (*GetServiceStatsResponse, error)
	GetStorageStatus(ctx context.Context, in *GetStorageStatusRequest, opts ...grpc.CallOption) (*GetStorageStatusResponse, error)
}

type shortenerV1Client struct {
	cc grpc.ClientConnInterface
}

func NewShortenerV1Client(cc grpc.ClientConnInterface) ShortenerV1Client {
	return &shortenerV1Client{cc}
}

func (c *shortenerV1Client) GetShortURL(ctx context.Context, in *GetShortURLRequest, opts ...grpc.CallOption) (*GetShortURLResponse, error) {
	out := new(GetShortURLResponse)
	err := c.cc.Invoke(ctx, ShortenerV1_GetShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV1Client) GetOriginalURL(ctx context.Context, in *GetOriginalURLRequest, opts ...grpc.CallOption) (*GetOriginalURLResponse, error) {
	out := new(GetOriginalURLResponse)
	err := c.cc.Invoke(ctx, ShortenerV1_GetOriginalURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV1Client) GetBatchShortURL(ctx context.Context, in *GetBatchShortURLRequest, opts ...grpc.CallOption) (*GetBatchShortURLResponse, error) {
	out := new(GetBatchShortURLResponse)
	err := c.cc.Invoke(ctx, ShortenerV1_GetBatchShortURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV1Client) GetUserURLs(ctx context.Context, in *GetUserURLsRequest, opts ...grpc.CallOption) (*GetUserURLsResponse, error) {
	out := new(GetUserURLsResponse)
	err := c.cc.Invoke(ctx, ShortenerV1_GetUserURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV1Client) DelUserURLs(ctx context.Context, in *DelUserURLsRequest, opts ...grpc.CallOption) (*DelUserURLsResponse, error) {
	out := new(DelUserURLsResponse)
	err := c.cc.Invoke(ctx, ShortenerV1_DelUserURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV1Client) GetServiceStats(ctx context.Context, in *GetServiceStatsRequest, opts ...grpc.CallOption) (*GetServiceStatsResponse, error) {
	out := new(GetServiceStatsResponse)
	err := c.cc.Invoke(ctx, ShortenerV1_GetServiceStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerV1Client) GetStorageStatus(ctx context.Context, in *GetStorageStatusRequest, opts ...grpc.CallOption) (*GetStorageStatusResponse, error) {
	out := new(GetStorageStatusResponse)
	err := c.cc.Invoke(ctx, ShortenerV1_GetStorageStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerV1Server is the server API for ShortenerV1 service.
// All implementations must embed UnimplementedShortenerV1Server
// for forward compatibility
type ShortenerV1Server interface {
	GetShortURL(context.Context, *GetShortURLRequest) (*GetShortURLResponse, error)
	GetOriginalURL(context.Context, *GetOriginalURLRequest) (*GetOriginalURLResponse, error)
	GetBatchShortURL(context.Context, *GetBatchShortURLRequest) (*GetBatchShortURLResponse, error)
	GetUserURLs(context.Context, *GetUserURLsRequest) (*GetUserURLsResponse, error)
	DelUserURLs(context.Context, *DelUserURLsRequest) (*DelUserURLsResponse, error)
	GetServiceStats(context.Context, *GetServiceStatsRequest) (*GetServiceStatsResponse, error)
	GetStorageStatus(context.Context, *GetStorageStatusRequest) (*GetStorageStatusResponse, error)
	mustEmbedUnimplementedShortenerV1Server()
}

// UnimplementedShortenerV1Server must be embedded to have forward compatible implementations.
type UnimplementedShortenerV1Server struct {
}

func (UnimplementedShortenerV1Server) GetShortURL(context.Context, *GetShortURLRequest) (*GetShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShortURL not implemented")
}
func (UnimplementedShortenerV1Server) GetOriginalURL(context.Context, *GetOriginalURLRequest) (*GetOriginalURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalURL not implemented")
}
func (UnimplementedShortenerV1Server) GetBatchShortURL(context.Context, *GetBatchShortURLRequest) (*GetBatchShortURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBatchShortURL not implemented")
}
func (UnimplementedShortenerV1Server) GetUserURLs(context.Context, *GetUserURLsRequest) (*GetUserURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserURLs not implemented")
}
func (UnimplementedShortenerV1Server) DelUserURLs(context.Context, *DelUserURLsRequest) (*DelUserURLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserURLs not implemented")
}
func (UnimplementedShortenerV1Server) GetServiceStats(context.Context, *GetServiceStatsRequest) (*GetServiceStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStats not implemented")
}
func (UnimplementedShortenerV1Server) GetStorageStatus(context.Context, *GetStorageStatusRequest) (*GetStorageStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageStatus not implemented")
}
func (UnimplementedShortenerV1Server) mustEmbedUnimplementedShortenerV1Server() {}

// UnsafeShortenerV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerV1Server will
// result in compilation errors.
type UnsafeShortenerV1Server interface {
	mustEmbedUnimplementedShortenerV1Server()
}

func RegisterShortenerV1Server(s grpc.ServiceRegistrar, srv ShortenerV1Server) {
	s.RegisterService(&ShortenerV1_ServiceDesc, srv)
}

func _ShortenerV1_GetShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).GetShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_GetShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).GetShortURL(ctx, req.(*GetShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV1_GetOriginalURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginalURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).GetOriginalURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_GetOriginalURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).GetOriginalURL(ctx, req.(*GetOriginalURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV1_GetBatchShortURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBatchShortURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).GetBatchShortURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_GetBatchShortURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).GetBatchShortURL(ctx, req.(*GetBatchShortURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV1_GetUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).GetUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_GetUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).GetUserURLs(ctx, req.(*GetUserURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV1_DelUserURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserURLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).DelUserURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_DelUserURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).DelUserURLs(ctx, req.(*DelUserURLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV1_GetServiceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).GetServiceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_GetServiceStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).GetServiceStats(ctx, req.(*GetServiceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerV1_GetStorageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerV1Server).GetStorageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShortenerV1_GetStorageStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerV1Server).GetStorageStatus(ctx, req.(*GetStorageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenerV1_ServiceDesc is the grpc.ServiceDesc for ShortenerV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener_v1.Shortener_v1",
	HandlerType: (*ShortenerV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShortURL",
			Handler:    _ShortenerV1_GetShortURL_Handler,
		},
		{
			MethodName: "GetOriginalURL",
			Handler:    _ShortenerV1_GetOriginalURL_Handler,
		},
		{
			MethodName: "GetBatchShortURL",
			Handler:    _ShortenerV1_GetBatchShortURL_Handler,
		},
		{
			MethodName: "GetUserURLs",
			Handler:    _ShortenerV1_GetUserURLs_Handler,
		},
		{
			MethodName: "DelUserURLs",
			Handler:    _ShortenerV1_DelUserURLs_Handler,
		},
		{
			MethodName: "GetServiceStats",
			Handler:    _ShortenerV1_GetServiceStats_Handler,
		},
		{
			MethodName: "GetStorageStatus",
			Handler:    _ShortenerV1_GetStorageStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortener.proto",
}
